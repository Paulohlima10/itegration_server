"""
Script para iniciar a aplica√ß√£o em modo produ√ß√£o
"""

import os
import sys
import subprocess
import signal
from pathlib import Path

def setup_production_environment():
    """
    Configura o ambiente de produ√ß√£o
    """
    print("üè≠ CONFIGURANDO AMBIENTE DE PRODU√á√ÉO")
    print("=" * 50)
    
    # Verifica se o arquivo .env existe
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado!")
        print("O arquivo .env √© obrigat√≥rio para produ√ß√£o!")
        return False
    
    # Verifica vari√°veis cr√≠ticas
    required_vars = [
        "SUPABASE_URL",
        "SUPABASE_KEY", 
        "SECRET_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Vari√°veis obrigat√≥rias n√£o configuradas: {', '.join(missing_vars)}")
        return False
    
    # Configura vari√°veis de produ√ß√£o
    os.environ["APP_ENV"] = "production"
    os.environ["LOG_LEVEL"] = "WARNING"
    
    # Verifica diret√≥rios necess√°rios
    for directory in ["logs", "data", "backups"]:
        dir_path = Path(directory)
        if not dir_path.exists():
            dir_path.mkdir(exist_ok=True)
            print(f"‚úÖ Diret√≥rio {directory} criado!")
    
    print("‚úÖ Ambiente de produ√ß√£o configurado!")
    return True

def check_dependencies():
    """
    Verifica se todas as depend√™ncias est√£o instaladas
    """
    print("\nüì¶ VERIFICANDO DEPEND√äNCIAS")
    print("=" * 50)
    
    try:
        # Lista de pacotes cr√≠ticos
        critical_packages = [
            "fastapi",
            "uvicorn", 
            "supabase",
            "sqlalchemy",
            "pydantic"
        ]
        
        for package in critical_packages:
            try:
                __import__(package)
                print(f"‚úÖ {package}")
            except ImportError:
                print(f"‚ùå {package} - N√ÉO INSTALADO")
                return False
        
        print("‚úÖ Todas as depend√™ncias est√£o instaladas!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar depend√™ncias: {e}")
        return False

def run_health_check():
    """
    Executa verifica√ß√£o de sa√∫de antes de iniciar
    """
    print("\nüè• VERIFICA√á√ÉO DE SA√öDE")
    print("=" * 50)
    
    try:
        # Importa e testa componentes cr√≠ticos
        from services.supabase_service import SupabaseService
        from services.config_service import ConfigService
        from services.logging_service import LoggingService
        
        # Testa configura√ß√£o
        config = ConfigService()
        if not config.get_supabase_config("default"):
            print("‚ùå Configura√ß√£o do Supabase inv√°lida")
            return False
        
        print("‚úÖ Configura√ß√£o v√°lida")
        
        # Testa logging
        logger = LoggingService()
        logger.log_info("Health check - sistema iniciando")
        print("‚úÖ Sistema de logs funcionando")
        
        print("‚úÖ Verifica√ß√£o de sa√∫de conclu√≠da!")
        return True
        
    except Exception as e:
        print(f"‚ùå Falha na verifica√ß√£o de sa√∫de: {e}")
        return False

def start_production_server():
    """
    Inicia o servidor de produ√ß√£o
    """
    print("\nüöÄ INICIANDO SERVIDOR DE PRODU√á√ÉO")
    print("=" * 50)
    print("Comando: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4")
    print("URL: http://localhost:8000")
    print("Modo: Produ√ß√£o (sem reload)")
    print("Workers: 4")
    print("\nPressione Ctrl+C para parar o servidor")
    print("=" * 50)
    
    try:
        # Inicia o servidor uvicorn em modo produ√ß√£o
        process = subprocess.Popen([
            sys.executable, "-m", "uvicorn",
            "main:app",
            "--host", "0.0.0.0",
            "--port", "8000", 
            "--workers", "4",
            "--access-log",
            "--log-level", "warning"
        ])
        
        # Aguarda o processo
        process.wait()
        
    except KeyboardInterrupt:
        print("\n\nüõë Parando servidor...")
        try:
            process.terminate()
            process.wait(timeout=10)
        except:
            process.kill()
        print("‚úÖ Servidor parado!")
        
    except FileNotFoundError:
        print("‚ùå uvicorn n√£o encontrado. Instale com: pip install uvicorn")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        return False
    
    return True

def create_systemd_service():
    """
    Cria arquivo de servi√ßo systemd (Linux)
    """
    if os.name != 'posix':
        return
    
    service_content = f"""[Unit]
Description=API de Recep√ß√£o de Dados
After=network.target

[Service]
Type=exec
User=www-data
Group=www-data
WorkingDirectory={Path.cwd()}
Environment=PATH={Path.cwd()}/venv/bin
ExecStart={sys.executable} -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
    
    service_file = Path("receptor-api.service")
    with open(service_file, "w") as f:
        f.write(service_content)
    
    print(f"‚úÖ Arquivo de servi√ßo criado: {service_file}")
    print("Para instalar: sudo cp receptor-api.service /etc/systemd/system/")
    print("Para habilitar: sudo systemctl enable receptor-api")
    print("Para iniciar: sudo systemctl start receptor-api")

def main():
    """
    Fun√ß√£o principal
    """
    print("üè≠ INICIADOR DE PRODU√á√ÉO")
    print("Projeto: API de Recep√ß√£o de Dados")
    print("=" * 50)
    
    # Configura ambiente de produ√ß√£o
    if not setup_production_environment():
        print("\n‚ùå Falha na configura√ß√£o do ambiente!")
        return 1
    
    # Verifica depend√™ncias
    if not check_dependencies():
        print("\n‚ùå Depend√™ncias n√£o atendidas!")
        print("Execute: pip install -r requirements.txt")
        return 1
    
    # Executa verifica√ß√£o de sa√∫de
    if not run_health_check():
        print("\n‚ùå Falha na verifica√ß√£o de sa√∫de!")
        return 1
    
    # Pergunta sobre cria√ß√£o do servi√ßo systemd
    if os.name == 'posix':
        create_service = input("\nüîß Criar arquivo de servi√ßo systemd? (s/N): ").lower().strip()
        if create_service in ['s', 'sim', 'y', 'yes']:
            create_systemd_service()
    
    # Inicia o servidor
    print("\nüöÄ Iniciando servidor de produ√ß√£o...")
    if not start_production_server():
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())